package com.bank.dao;

import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.Mockito.when;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;
import org.mockito.Mockito;

import com.bank.dao.impl.EmployeeOperationsDAOImpl;
import com.bank.dao.util.PostresqlConnection;
import com.bank.exception.BussinessException;
import com.bank.modal.Account;
import com.bank.modal.Customer;
import com.bank.modal.Employee;


class EmployeeOperationsDAOTest {
	
	static Connection mockConnection = mock(Connection.class);
	static PreparedStatement mockPreparedStatement = mock(PreparedStatement.class); 
	static ResultSet mockResultSet = mock(ResultSet.class);
	
	Account mockAccount;
	Employee mockEmployee;
	Customer mockCustomer;
	
	EmployeeOperationsDAO employeeOperationsDAO = new EmployeeOperationsDAOImpl();
	
	@BeforeAll
	public static void initalize() throws SQLException, ClassNotFoundException {
		mockStatic(PostresqlConnection.class);
	}
	
	@BeforeEach
	public void setUp() throws ClassNotFoundException, SQLException {
		
		mockEmployee = mock(Employee.class);
		mockAccount = mock(Account.class);
		mockCustomer = mock(Customer.class);
		
		when(PostresqlConnection.getConnection()).thenReturn(mockConnection);
		when(mockConnection.prepareStatement(Mockito.anyString())).thenReturn(mockPreparedStatement);
		
		System.out.println("Before Each Test");
	}
	
	
	//for Employee Log in
	@Test
	public void testEmployeeLogInWithoutExceprion() throws BussinessException, SQLException, RuntimeException {
		
		doNothing().when(mockPreparedStatement).setString(Mockito.anyInt(), Mockito.anyString());
		when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
		
		when(mockResultSet.next()).thenReturn(Boolean.TRUE);
		
		assertNotNull(employeeOperationsDAO.employeeLogIn("", ""));
		assertNotNull(employeeOperationsDAO.employeeLogIn("abc", "abc"));
		assertNotNull(employeeOperationsDAO.employeeLogIn("sagar@gmail.com", "gadvjhbsk"));
		assertNotNull(employeeOperationsDAO.employeeLogIn("ghsdhjsd@", "gabdf"));
		assertNotNull(employeeOperationsDAO.employeeLogIn("313354", "45432"));
		assertNotNull(employeeOperationsDAO.employeeLogIn("!@#$%^&*", "!#@$%^&"));
		System.out.println("Employee Log In Test Successful without exception.");
	}
	
	@Test
	public void testEmployeeLogInWithException() throws SQLException {
		
		doNothing().when(mockPreparedStatement).setString(Mockito.anyInt(), Mockito.anyString());		
		when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
		
		when(mockResultSet.next()).thenReturn(Boolean.FALSE);
		
		assertThrows(BussinessException.class, new Executable() {
			
			@Override
			public void execute() throws Throwable {
				// TODO Auto-generated method stub
				employeeOperationsDAO.employeeLogIn("abc", "abc");
			}
		});
		System.out.println("Employee Log In Test Successful with exception.");
	}
	
	//for Opening Account Request approval
	@Test
	public void testApproveAccountOpeningRequestConfirmation() throws SQLException, BussinessException {
		
		doNothing().when(mockPreparedStatement).setString(Mockito.anyInt(), Mockito.anyString());
		doNothing().when(mockPreparedStatement).setInt(Mockito.anyInt(), Mockito.anyInt());
		doNothing().when(mockPreparedStatement).setLong(Mockito.anyInt(), Mockito.anyLong());
		
		when(mockPreparedStatement.executeUpdate()).thenReturn(1);
		
		assertEquals(1, employeeOperationsDAO.approveAccountOpeningRequest(mockAccount, mockEmployee, 1));
		System.out.println("Employee Account reqest approval Accepted.");
	}
	
	@Test
	public void testApproveAccountOpeningRequestRejection() throws SQLException, BussinessException {
		
		doNothing().when(mockPreparedStatement).setString(Mockito.anyInt(), Mockito.anyString());
		doNothing().when(mockPreparedStatement).setInt(Mockito.anyInt(), Mockito.anyInt());
		doNothing().when(mockPreparedStatement).setLong(Mockito.anyInt(), Mockito.anyLong());
		when(mockPreparedStatement.executeUpdate()).thenReturn(0);
		
		assertThrows(BussinessException.class, new Executable() {
			
			@Override
			public void execute() throws Throwable {
				// TODO Auto-generated method stub
				employeeOperationsDAO.approveAccountOpeningRequest(mockAccount, mockEmployee, 0);
			}
		});
		System.out.println("Employee Account reqest approval Rejection.");
	}
	
	@Test
	public void testGetAllPendingAccountRequest() throws SQLException {
		
		when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
		
		
	}
}
