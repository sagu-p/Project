package com.bank.services.impl;

import java.util.ArrayList;
import java.util.List;

import com.bank.dao.CustomerOperationsDAO;
import com.bank.dao.impl.CustomerOperationsDAOImpl;
import com.bank.exception.BussinessException;
import com.bank.modal.Account;
import com.bank.modal.Customer;
import com.bank.services.CustomerOperations;

public class CustomerOperationsImpl implements CustomerOperations {
	
	private CustomerOperationsDAO customerOperationsDAO = new CustomerOperationsDAOImpl();

	@Override
	public int newCustomerRegistration(Customer customer) throws BussinessException {
		int c = 0;
		CustomerOperationsDAO customerOperationsDAO1 = new CustomerOperationsDAOImpl();
		String gender = customer.getGender();
		if(gender.equalsIgnoreCase("male") | gender.equalsIgnoreCase("female")) {
			gender = gender.toUpperCase().charAt(0)+"";
			customer.setGender(gender);
			logFile.trace("Coverted to DB Value type >>> Gender: "+gender);
			
		} else {
			throw new BussinessException("Enter Valid Gender");
		}
		
		if(customer.getEmail().matches("^(.+)@(.+)$")) {
			if((customer.getNumber()+"").length() == 10) {
				if((customer.getSsn()+"").length() == 9)
					c = customerOperationsDAO1.newCustomerRegistration(customer);
				else
					throw new BussinessException("Enter Valid SSN of 9 Digits.");
			}else
				throw new BussinessException("Enter Valid Numberof 10 Digits.");
		}else
			throw new BussinessException("Enter Valid Email.");
		
		if(c != 0)
			return c;
		else
			throw new BussinessException("User can't be able to Sign Up. [Try with different email and/or number.] ");
	}

	@Override
	public Customer customerLogin(String email, String pass) throws BussinessException {
		Customer customer = null;
		
		if(email.matches("^(.+)@(.+)$"))
			customer = customerOperationsDAO.customerLogin(email, pass);
		else
			throw new BussinessException("Enter Valid Email Address.");
		
		
		return customer;
	}

	@Override
	public Customer getCustomerDetailsById(int id) throws BussinessException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int createNewBankAccount(Account account, Customer customer) throws BussinessException {
		int c = 0;
		
		c = customerOperationsDAO.createNewBankAccount(account, customer);
		
		return c;
	}

	@Override
	public List<Account> getPendingRequesteAccount(Customer customer) throws BussinessException {
		List<Account> pendingRequesteAccounts = new ArrayList<>();
		
		pendingRequesteAccounts = customerOperationsDAO.getPendingRequesteAccount(customer);
		
		if ( pendingRequesteAccounts.size() == 0)
			throw new BussinessException("No Pending Request.");
		
		return pendingRequesteAccounts;
	}

	@Override
	public List<Account> getAllAccountsOfCustomer(Customer customer) throws BussinessException {
		List<Account> customerAccounts = new ArrayList<>();
		
		customerAccounts = customerOperationsDAO.getAllAccountsOfCustomer(customer);
		
		if ( customerAccounts.size() == 0)
			throw new BussinessException("No Account/s Found.");
		
		return customerAccounts;
	}

}
